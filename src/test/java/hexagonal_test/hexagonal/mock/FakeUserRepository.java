package hexagonal_test.hexagonal.mock;


import hexagonal_test.hexagonal.user.domain.User;
import hexagonal_test.hexagonal.user.service.port.UserRepository;

import java.util.*;


public class FakeUserRepository implements UserRepository {

    private Long autoGeneratedId = 0L;
    private final List<User> data = new ArrayList<>();

    @Override
    public Optional<User> findByEmail(String email) {
        return data.stream().filter(item -> item.getEmail().equals(email)).findAny();
    }

    @Override
    public User save(User user) {
        if (user.getId() == null || user.getId() == 0) {
            User newUser = User.builder()
                    .id(++autoGeneratedId)
                    .email(user.getEmail())
                    .username(user.getUsername())
                    .password(user.getPassword())
                    .build();
            data.add(newUser);
            return newUser;
        } else {
            data.removeIf(item -> Objects.equals(item.getId(), user.getId()));
            data.add(user);
            return user;
        }
    }

    @Override
    public void deleteAll() {
        data.clear();
    }

    @Override
    public Long count() {
        return (long) data.size();
    }

    @Override
    public List<User> findAll() {
        return data;
    }

//    @Override
//    public User getById(long id) {
//        return findById(id).orElseThrow(() -> new ResourceNotFoundException("Users", id));
//    }
//
//    @Override
//    public Optional<User> findById(long id) {
//        return data.stream().filter(item -> item.getId().equals(id)).findAny();
//    }
//
//    @Override
//    public Optional<User> findByIdAndStatus(long id, UserStatus userStatus) {
//        return data.stream().filter(item -> item.getId().equals(id) && item.getStatus() == userStatus).findAny();
//    }
//
//    @Override
//    public Optional<User> findByEmailAndStatus(String email, UserStatus userStatus) {
//        return data.stream().filter(item -> item.getEmail().equals(email) && item.getStatus() == userStatus).findAny();
//    }
//
//    @Override
//    public User save(User user) {
//        if (user.getId() == null || user.getId() == 0) {
//            User newUser = User.builder()
//                .id(autoGeneratedId.incrementAndGet())
//                .email(user.getEmail())
//                .nickname(user.getNickname())
//                .address(user.getAddress())
//                .certificationCode(user.getCertificationCode())
//                .status(user.getStatus())
//                .lastLoginAt(user.getLastLoginAt())
//                .build();
//            data.add(newUser);
//            return newUser;
//        } else {
//            data.removeIf(item -> Objects.equals(item.getId(), user.getId()));
//            data.add(user);
//            return user;
//        }
//    }
}
